/*
Given two integers n and k, return all possible combinations of k numbers out of 1 ... n.

For example,
If n = 4 and k = 2, a solution is:

[
  [2,4],
  [3,4],
  [2,3],
  [1,2],
  [1,3],
  [1,4],
]
*/

class Solution {
    public List<List<Integer>> combine(int n, int k) {
        List<List<Integer>> res = new ArrayList<>();
        List<Integer> combine = new ArrayList<>();
        helper(n, k, 1, res, combine);
        return res;
    }
    private void helper(int n, int k, int start, List<List<Integer>> res, List<Integer> combine) {
        if (k == 0) {
            res.add(new ArrayList<Integer>(combine));
            return;
        }
        for (int i = start; i < n + 1; i++) {
            combine.add(i); // size + 1
            helper(n, k - 1, i + 1, res, combine); // k - 1
            combine.remove(combine.size() - 1);
        }
        
    }
}
